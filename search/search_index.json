{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Amateur blog This is the first blog I write. I would like to organize my ideas and my research projects. Topics Signal Processing mainly focused on Audio (part of my PhD work) Machine learning, with special focus on Deep learning Programming: Python, tensorflow, keras, matlab, ... Earth Science","title":"Home"},{"location":"#amateur-blog","text":"This is the first blog I write. I would like to organize my ideas and my research projects.","title":"Amateur blog"},{"location":"#topics","text":"Signal Processing mainly focused on Audio (part of my PhD work) Machine learning, with special focus on Deep learning Programming: Python, tensorflow, keras, matlab, ... Earth Science","title":"Topics"},{"location":"about/","text":"My Background","title":"About"},{"location":"about/#my-background","text":"","title":"My Background"},{"location":"audio/info/","text":"Info Second page My info","title":"Audio Signal Processing"},{"location":"audio/info/#info","text":"Second page","title":"Info"},{"location":"audio/info/#my-info","text":"","title":"My info"},{"location":"code/info/","text":"CODE JAX Autograd and XLA toguether for high-performance machine learning research. With Autograd Automatically differentiate native Python and NumPy functions. grad = Supports reverse mode differentiation (backpropagation) With XLA Compile and run NumPy programs on GPUs and TPUs. Compilation under the hood by default. Tensorflow tf.GradientTape(): For automatic differentiation computing the gradient of a computation with respect to its input variables. \"Tape\" records all the operations executed. import tensorflow as tf x = tf.constant(3.0) with tf.GradientTape() as tape: # to keep track of the variables tape.watch(x) # Some computation (could be a NN) y = x**3 # Calculate gradients w.r.t a variable print(tape.gradient(y, x).numpy()) # -> 27.0","title":"Code"},{"location":"code/info/#code","text":"","title":"CODE"},{"location":"code/info/#jax","text":"Autograd and XLA toguether for high-performance machine learning research. With Autograd Automatically differentiate native Python and NumPy functions. grad = Supports reverse mode differentiation (backpropagation) With XLA Compile and run NumPy programs on GPUs and TPUs. Compilation under the hood by default.","title":"JAX"},{"location":"code/info/#tensorflow","text":"tf.GradientTape(): For automatic differentiation computing the gradient of a computation with respect to its input variables. \"Tape\" records all the operations executed. import tensorflow as tf x = tf.constant(3.0) with tf.GradientTape() as tape: # to keep track of the variables tape.watch(x) # Some computation (could be a NN) y = x**3 # Calculate gradients w.r.t a variable print(tape.gradient(y, x).numpy()) # -> 27.0","title":"Tensorflow"},{"location":"earthscience/databases/","text":"7 FREE sites for downloading satellite images USGS Landviewer Copernicus - \"Sentinels Scientific Datahub\" - ESA Sentinel hub NASA earthData search - NASA EOSDIS Remote PIXEL INPE image catalog IN-SITU databases NEON (National Ecological Observatory Network) Data from 81 field sites across the united states (47 terrestial + 34 aquatic) Products USGS Every one to two days MODIS Aqua and Terra spacecraft views the entire surface of the Earth. In here there is a table with all the MODIS (Moderate Resolution Imaging Spectroradiometer) products available. For example we can filter LAI and FPAR products. The result MCD15A[3,2]H is a collection of combined MODIS, Terra MODIS or Aqua MODIS. It has a spatial resolution of 500m and a Multi-day temporal resolution. Copernicus global land service Product: Leaf Area Index (LAI) Sensor: PROVA-V Spatial information: 300m - 1km Temporal coverage: Jan 2014 - present, 1999 - present url: portal output files: GeoTIFF if the product is clipped, otherwise is NETCDF Example of plotting LAI values from a downloaded product. from netCDF4 import Dataset import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap data = Dataset(r'C:\\IRENE\\IPL WORK\\copernicus data\\c_gls_LAI-RT0_202004200000_GLOBE_PROBAV_V2.0.1.nc') #get all the data lats = data.variables['lat'][:] lons = data.variables['lon'][:] times = data.variables['time'][:] # MAP coordinates for SPAIN using ESPG reference mp = Basemap( llcrnrlat=34, urcrnrlat=45, llcrnrlon=-10, urcrnrlon=4, resolution='i', epsg=4326) lat_x = np.where(lats>34) lat_y = np.where(lats<45) lon_x = np.where(lons>-10) lon_y = np.where(lons<4) long, lat = np.meshgrid(lons[lon_x[0][0]:lon_y[0][-1]], lats[lat_y[0][0]:lat_x[0][-1]]) x, y = mp(long, lat) cmap = plt.cm.Greens c_scheme = mp.pcolor(x, y, np.squeeze(lais[0,lat_y[0][0]:lat_x[0][-1], lon_x[0][0]:lon_y[0][-1]]), cmap=cmap)#, mp.drawcoastlines() mp.drawstates() mp.drawcountries() cbar = mp.colorbar(c_scheme, location='right', pad='10%') plt.title('LAI values') plt.show()","title":"Databases"},{"location":"earthscience/databases/#7-free-sites-for-downloading-satellite-images","text":"USGS Landviewer Copernicus - \"Sentinels Scientific Datahub\" - ESA Sentinel hub NASA earthData search - NASA EOSDIS Remote PIXEL INPE image catalog","title":"7 FREE sites for downloading satellite images"},{"location":"earthscience/databases/#in-situ-databases","text":"NEON (National Ecological Observatory Network) Data from 81 field sites across the united states (47 terrestial + 34 aquatic)","title":"IN-SITU databases"},{"location":"earthscience/databases/#products","text":"","title":"Products"},{"location":"earthscience/databases/#usgs","text":"Every one to two days MODIS Aqua and Terra spacecraft views the entire surface of the Earth. In here there is a table with all the MODIS (Moderate Resolution Imaging Spectroradiometer) products available. For example we can filter LAI and FPAR products. The result MCD15A[3,2]H is a collection of combined MODIS, Terra MODIS or Aqua MODIS. It has a spatial resolution of 500m and a Multi-day temporal resolution.","title":"USGS"},{"location":"earthscience/databases/#copernicus-global-land-service","text":"Product: Leaf Area Index (LAI) Sensor: PROVA-V Spatial information: 300m - 1km Temporal coverage: Jan 2014 - present, 1999 - present url: portal output files: GeoTIFF if the product is clipped, otherwise is NETCDF Example of plotting LAI values from a downloaded product. from netCDF4 import Dataset import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap data = Dataset(r'C:\\IRENE\\IPL WORK\\copernicus data\\c_gls_LAI-RT0_202004200000_GLOBE_PROBAV_V2.0.1.nc') #get all the data lats = data.variables['lat'][:] lons = data.variables['lon'][:] times = data.variables['time'][:] # MAP coordinates for SPAIN using ESPG reference mp = Basemap( llcrnrlat=34, urcrnrlat=45, llcrnrlon=-10, urcrnrlon=4, resolution='i', epsg=4326) lat_x = np.where(lats>34) lat_y = np.where(lats<45) lon_x = np.where(lons>-10) lon_y = np.where(lons<4) long, lat = np.meshgrid(lons[lon_x[0][0]:lon_y[0][-1]], lats[lat_y[0][0]:lat_x[0][-1]]) x, y = mp(long, lat) cmap = plt.cm.Greens c_scheme = mp.pcolor(x, y, np.squeeze(lais[0,lat_y[0][0]:lat_x[0][-1], lon_x[0][0]:lon_y[0][-1]]), cmap=cmap)#, mp.drawcoastlines() mp.drawstates() mp.drawcountries() cbar = mp.colorbar(c_scheme, location='right', pad='10%') plt.title('LAI values') plt.show()","title":"Copernicus global land service"},{"location":"earthscience/info/","text":"Earth Science Here I will talk about concepts related to Earth Science.","title":"Info"},{"location":"earthscience/info/#earth-science","text":"Here I will talk about concepts related to Earth Science.","title":"Earth Science"},{"location":"earthscience/multispectral/","text":"Multispectral Remote Sensing Data GIS Standard of encoding Geographical Information into a computer file. File formats Name properties extension netCDF (Network Common Data Form) File format with climate and Forecast (CF) metadata for earth science data. Binary storage in open format with optional compression. .nc GeoTIFF TIFF format which includes GIS compatible georeferencing systems. Byte data [0, 255] and colour scale. .tif / .tiff TIFF (Tagged Image File Format) Computer file format for storing raster graphics images. .tif / .tiff Shapefile Standard for representing geospatial vector data. Describes geometries as points, polylines or polygons. .shp Data structures Xarray Default package for handling spatial-temporal-variable datasets. In the format (latitude x longitude x time x variable) GeoPandas To store data from shapefiles. Raster Data stored as a grid of values which are rendered on a map as pixels. Each pixel value represents an area on the Earth's surface. Each cell --> pixel --> area on the ground Resolution --> area that each pixel represents on the ground. Projection EPSG code = standard to name projections using a numerical code Pan-sharpening Some characteristics of some of the most used sensors Sensor Spatial resolution Temporal resolution Spectral resolution Landsat TM 30 m 16 days 7 bands MODIS 250 - 100 m 1 day 36 bands Pansharpening is a process of merging high-resolution panchromatic and lower resolution multispectral imagery to create a single high-resolution color image. Radiance to reflectance Radiance is the variable directly measured by temote sensing instruments. It is how much light the instrument 'sees' from the object being observed. Depends on the illumination, the orientation and position of the target and the path of the light through the atmosphere. Reflectance is the ratio of the amount of light leaving a a target to the amount of light striking the target. It is a property of the material being observed. Spectral response functions (SRFs) Spectral response describes the sensitivity of the photosensor to optical radiation of different wavelengths. Tutorials Earth Lab: Multispectral remote sensing data in python Differential calculus: python colab","title":"Multispectral"},{"location":"earthscience/multispectral/#multispectral-remote-sensing-data","text":"","title":"Multispectral Remote Sensing Data"},{"location":"earthscience/multispectral/#gis","text":"Standard of encoding Geographical Information into a computer file.","title":"GIS"},{"location":"earthscience/multispectral/#file-formats","text":"Name properties extension netCDF (Network Common Data Form) File format with climate and Forecast (CF) metadata for earth science data. Binary storage in open format with optional compression. .nc GeoTIFF TIFF format which includes GIS compatible georeferencing systems. Byte data [0, 255] and colour scale. .tif / .tiff TIFF (Tagged Image File Format) Computer file format for storing raster graphics images. .tif / .tiff Shapefile Standard for representing geospatial vector data. Describes geometries as points, polylines or polygons. .shp","title":"File formats"},{"location":"earthscience/multispectral/#data-structures","text":"","title":"Data structures"},{"location":"earthscience/multispectral/#xarray","text":"Default package for handling spatial-temporal-variable datasets. In the format (latitude x longitude x time x variable)","title":"Xarray"},{"location":"earthscience/multispectral/#geopandas","text":"To store data from shapefiles.","title":"GeoPandas"},{"location":"earthscience/multispectral/#raster","text":"Data stored as a grid of values which are rendered on a map as pixels. Each pixel value represents an area on the Earth's surface. Each cell --> pixel --> area on the ground Resolution --> area that each pixel represents on the ground.","title":"Raster"},{"location":"earthscience/multispectral/#projection","text":"EPSG code = standard to name projections using a numerical code","title":"Projection"},{"location":"earthscience/multispectral/#pan-sharpening","text":"Some characteristics of some of the most used sensors Sensor Spatial resolution Temporal resolution Spectral resolution Landsat TM 30 m 16 days 7 bands MODIS 250 - 100 m 1 day 36 bands Pansharpening is a process of merging high-resolution panchromatic and lower resolution multispectral imagery to create a single high-resolution color image.","title":"Pan-sharpening"},{"location":"earthscience/multispectral/#radiance-to-reflectance","text":"Radiance is the variable directly measured by temote sensing instruments. It is how much light the instrument 'sees' from the object being observed. Depends on the illumination, the orientation and position of the target and the path of the light through the atmosphere. Reflectance is the ratio of the amount of light leaving a a target to the amount of light striking the target. It is a property of the material being observed.","title":"Radiance to reflectance"},{"location":"earthscience/multispectral/#spectral-response-functions-srfs","text":"Spectral response describes the sensitivity of the photosensor to optical radiation of different wavelengths.","title":"Spectral response functions (SRFs)"},{"location":"earthscience/multispectral/#tutorials","text":"Earth Lab: Multispectral remote sensing data in python Differential calculus: python colab","title":"Tutorials"}]}